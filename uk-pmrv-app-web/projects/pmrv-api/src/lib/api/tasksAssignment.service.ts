/**
 * PMRV API Documentation
 * Back-end REST API documentation for the UK PMRV application
 *
 * The version of the OpenAPI document: uk-pmrv-app-api 0.58.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpEvent, HttpHeaders, HttpParameterCodec, HttpParams, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';

import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { CustomHttpParameterCodec } from '../encoder';
import { AssigneeUserInfoDTO } from '../model/assigneeUserInfoDTO';
import { RequestTaskAssignmentDTO } from '../model/requestTaskAssignmentDTO';
import { BASE_PATH } from '../variables';

@Injectable({
  providedIn: 'root',
})
export class TasksAssignmentService {
  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Assigns a task to a user
   * @param requestTaskAssignmentDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public assignTaskUsingPOST(requestTaskAssignmentDTO?: RequestTaskAssignmentDTO): Observable<any>;
  public assignTaskUsingPOST(
    requestTaskAssignmentDTO: RequestTaskAssignmentDTO,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined },
  ): Observable<HttpResponse<any>>;
  public assignTaskUsingPOST(
    requestTaskAssignmentDTO: RequestTaskAssignmentDTO,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined },
  ): Observable<HttpEvent<any>>;
  public assignTaskUsingPOST(
    requestTaskAssignmentDTO: RequestTaskAssignmentDTO,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined },
  ): Observable<any>;
  public assignTaskUsingPOST(
    requestTaskAssignmentDTO?: RequestTaskAssignmentDTO,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined },
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.post<any>(
      `${this.configuration.basePath}/api/v1.0/tasks-assignment/assign`,
      requestTaskAssignmentDTO,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Returns all users to whom can be assigned the provided task
   * @param taskId The task id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCandidateAssigneesByTaskIdUsingGET(taskId: number): Observable<Array<AssigneeUserInfoDTO>>;
  public getCandidateAssigneesByTaskIdUsingGET(
    taskId: number,
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<Array<AssigneeUserInfoDTO>>>;
  public getCandidateAssigneesByTaskIdUsingGET(
    taskId: number,
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<Array<AssigneeUserInfoDTO>>>;
  public getCandidateAssigneesByTaskIdUsingGET(
    taskId: number,
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<Array<AssigneeUserInfoDTO>>;
  public getCandidateAssigneesByTaskIdUsingGET(
    taskId: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error(
        'Required parameter taskId was null or undefined when calling getCandidateAssigneesByTaskIdUsingGET.',
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<Array<AssigneeUserInfoDTO>>(
      `${this.configuration.basePath}/api/v1.0/tasks-assignment/${encodeURIComponent(
        String(taskId),
      )}/candidate-assignees`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Returns all users to whom can be assigned the provided task type
   * @param taskId The current task id that user works on. Not related to the task type for which we search candidate assignees
   * @param taskType The task type for which you need to retrieve candidate assignees
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCandidateAssigneesByTaskTypeUsingGET(
    taskId: number,
    taskType:
      | 'ACCOUNT_USERS_SETUP'
      | 'AER_APPLICATION_AMENDS_SUBMIT'
      | 'AER_APPLICATION_REVIEW'
      | 'AER_APPLICATION_SUBMIT'
      | 'AER_APPLICATION_VERIFICATION_SUBMIT'
      | 'AER_WAIT_FOR_AMENDS'
      | 'AER_WAIT_FOR_REVIEW'
      | 'AER_WAIT_FOR_VERIFICATION'
      | 'INSTALLATION_ACCOUNT_OPENING_APPLICATION_REVIEW'
      | 'INSTALLATION_ACCOUNT_OPENING_ARCHIVE'
      | 'NEW_VERIFICATION_BODY_INSTALLATION'
      | 'PERMIT_ISSUANCE_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_ISSUANCE_APPLICATION_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_SUBMIT'
      | 'PERMIT_ISSUANCE_CONFIRM_PAYMENT'
      | 'PERMIT_ISSUANCE_MAKE_PAYMENT'
      | 'PERMIT_ISSUANCE_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_TRACK_PAYMENT'
      | 'PERMIT_ISSUANCE_WAIT_FOR_AMENDS'
      | 'PERMIT_ISSUANCE_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_ISSUANCE_WAIT_FOR_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_NOTIFICATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_AMENDS'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_REVOCATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_REVOCATION_APPLICATION_SUBMIT'
      | 'PERMIT_REVOCATION_CESSATION_SUBMIT'
      | 'PERMIT_REVOCATION_CONFIRM_PAYMENT'
      | 'PERMIT_REVOCATION_MAKE_PAYMENT'
      | 'PERMIT_REVOCATION_TRACK_PAYMENT'
      | 'PERMIT_REVOCATION_WAIT_FOR_APPEAL'
      | 'PERMIT_REVOCATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_SUBMIT'
      | 'PERMIT_SURRENDER_CESSATION_SUBMIT'
      | 'PERMIT_SURRENDER_CONFIRM_PAYMENT'
      | 'PERMIT_SURRENDER_MAKE_PAYMENT'
      | 'PERMIT_SURRENDER_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_TRACK_PAYMENT'
      | 'PERMIT_SURRENDER_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_SURRENDER_WAIT_FOR_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_VARIATION_APPLICATION_REVIEW'
      | 'PERMIT_VARIATION_OPERATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_REGULATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_VARIATION_WAIT_FOR_REVIEW'
      | 'PERMIT_VARIATION_WAIT_FOR_RFI_RESPONSE'
      | 'VERIFIER_NO_LONGER_AVAILABLE',
  ): Observable<Array<AssigneeUserInfoDTO>>;
  public getCandidateAssigneesByTaskTypeUsingGET(
    taskId: number,
    taskType:
      | 'ACCOUNT_USERS_SETUP'
      | 'AER_APPLICATION_AMENDS_SUBMIT'
      | 'AER_APPLICATION_REVIEW'
      | 'AER_APPLICATION_SUBMIT'
      | 'AER_APPLICATION_VERIFICATION_SUBMIT'
      | 'AER_WAIT_FOR_AMENDS'
      | 'AER_WAIT_FOR_REVIEW'
      | 'AER_WAIT_FOR_VERIFICATION'
      | 'INSTALLATION_ACCOUNT_OPENING_APPLICATION_REVIEW'
      | 'INSTALLATION_ACCOUNT_OPENING_ARCHIVE'
      | 'NEW_VERIFICATION_BODY_INSTALLATION'
      | 'PERMIT_ISSUANCE_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_ISSUANCE_APPLICATION_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_SUBMIT'
      | 'PERMIT_ISSUANCE_CONFIRM_PAYMENT'
      | 'PERMIT_ISSUANCE_MAKE_PAYMENT'
      | 'PERMIT_ISSUANCE_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_TRACK_PAYMENT'
      | 'PERMIT_ISSUANCE_WAIT_FOR_AMENDS'
      | 'PERMIT_ISSUANCE_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_ISSUANCE_WAIT_FOR_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_NOTIFICATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_AMENDS'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_REVOCATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_REVOCATION_APPLICATION_SUBMIT'
      | 'PERMIT_REVOCATION_CESSATION_SUBMIT'
      | 'PERMIT_REVOCATION_CONFIRM_PAYMENT'
      | 'PERMIT_REVOCATION_MAKE_PAYMENT'
      | 'PERMIT_REVOCATION_TRACK_PAYMENT'
      | 'PERMIT_REVOCATION_WAIT_FOR_APPEAL'
      | 'PERMIT_REVOCATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_SUBMIT'
      | 'PERMIT_SURRENDER_CESSATION_SUBMIT'
      | 'PERMIT_SURRENDER_CONFIRM_PAYMENT'
      | 'PERMIT_SURRENDER_MAKE_PAYMENT'
      | 'PERMIT_SURRENDER_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_TRACK_PAYMENT'
      | 'PERMIT_SURRENDER_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_SURRENDER_WAIT_FOR_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_VARIATION_APPLICATION_REVIEW'
      | 'PERMIT_VARIATION_OPERATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_REGULATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_VARIATION_WAIT_FOR_REVIEW'
      | 'PERMIT_VARIATION_WAIT_FOR_RFI_RESPONSE'
      | 'VERIFIER_NO_LONGER_AVAILABLE',
    observe: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpResponse<Array<AssigneeUserInfoDTO>>>;
  public getCandidateAssigneesByTaskTypeUsingGET(
    taskId: number,
    taskType:
      | 'ACCOUNT_USERS_SETUP'
      | 'AER_APPLICATION_AMENDS_SUBMIT'
      | 'AER_APPLICATION_REVIEW'
      | 'AER_APPLICATION_SUBMIT'
      | 'AER_APPLICATION_VERIFICATION_SUBMIT'
      | 'AER_WAIT_FOR_AMENDS'
      | 'AER_WAIT_FOR_REVIEW'
      | 'AER_WAIT_FOR_VERIFICATION'
      | 'INSTALLATION_ACCOUNT_OPENING_APPLICATION_REVIEW'
      | 'INSTALLATION_ACCOUNT_OPENING_ARCHIVE'
      | 'NEW_VERIFICATION_BODY_INSTALLATION'
      | 'PERMIT_ISSUANCE_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_ISSUANCE_APPLICATION_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_SUBMIT'
      | 'PERMIT_ISSUANCE_CONFIRM_PAYMENT'
      | 'PERMIT_ISSUANCE_MAKE_PAYMENT'
      | 'PERMIT_ISSUANCE_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_TRACK_PAYMENT'
      | 'PERMIT_ISSUANCE_WAIT_FOR_AMENDS'
      | 'PERMIT_ISSUANCE_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_ISSUANCE_WAIT_FOR_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_NOTIFICATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_AMENDS'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_REVOCATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_REVOCATION_APPLICATION_SUBMIT'
      | 'PERMIT_REVOCATION_CESSATION_SUBMIT'
      | 'PERMIT_REVOCATION_CONFIRM_PAYMENT'
      | 'PERMIT_REVOCATION_MAKE_PAYMENT'
      | 'PERMIT_REVOCATION_TRACK_PAYMENT'
      | 'PERMIT_REVOCATION_WAIT_FOR_APPEAL'
      | 'PERMIT_REVOCATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_SUBMIT'
      | 'PERMIT_SURRENDER_CESSATION_SUBMIT'
      | 'PERMIT_SURRENDER_CONFIRM_PAYMENT'
      | 'PERMIT_SURRENDER_MAKE_PAYMENT'
      | 'PERMIT_SURRENDER_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_TRACK_PAYMENT'
      | 'PERMIT_SURRENDER_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_SURRENDER_WAIT_FOR_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_VARIATION_APPLICATION_REVIEW'
      | 'PERMIT_VARIATION_OPERATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_REGULATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_VARIATION_WAIT_FOR_REVIEW'
      | 'PERMIT_VARIATION_WAIT_FOR_RFI_RESPONSE'
      | 'VERIFIER_NO_LONGER_AVAILABLE',
    observe: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<HttpEvent<Array<AssigneeUserInfoDTO>>>;
  public getCandidateAssigneesByTaskTypeUsingGET(
    taskId: number,
    taskType:
      | 'ACCOUNT_USERS_SETUP'
      | 'AER_APPLICATION_AMENDS_SUBMIT'
      | 'AER_APPLICATION_REVIEW'
      | 'AER_APPLICATION_SUBMIT'
      | 'AER_APPLICATION_VERIFICATION_SUBMIT'
      | 'AER_WAIT_FOR_AMENDS'
      | 'AER_WAIT_FOR_REVIEW'
      | 'AER_WAIT_FOR_VERIFICATION'
      | 'INSTALLATION_ACCOUNT_OPENING_APPLICATION_REVIEW'
      | 'INSTALLATION_ACCOUNT_OPENING_ARCHIVE'
      | 'NEW_VERIFICATION_BODY_INSTALLATION'
      | 'PERMIT_ISSUANCE_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_ISSUANCE_APPLICATION_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_SUBMIT'
      | 'PERMIT_ISSUANCE_CONFIRM_PAYMENT'
      | 'PERMIT_ISSUANCE_MAKE_PAYMENT'
      | 'PERMIT_ISSUANCE_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_TRACK_PAYMENT'
      | 'PERMIT_ISSUANCE_WAIT_FOR_AMENDS'
      | 'PERMIT_ISSUANCE_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_ISSUANCE_WAIT_FOR_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_NOTIFICATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_AMENDS'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_REVOCATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_REVOCATION_APPLICATION_SUBMIT'
      | 'PERMIT_REVOCATION_CESSATION_SUBMIT'
      | 'PERMIT_REVOCATION_CONFIRM_PAYMENT'
      | 'PERMIT_REVOCATION_MAKE_PAYMENT'
      | 'PERMIT_REVOCATION_TRACK_PAYMENT'
      | 'PERMIT_REVOCATION_WAIT_FOR_APPEAL'
      | 'PERMIT_REVOCATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_SUBMIT'
      | 'PERMIT_SURRENDER_CESSATION_SUBMIT'
      | 'PERMIT_SURRENDER_CONFIRM_PAYMENT'
      | 'PERMIT_SURRENDER_MAKE_PAYMENT'
      | 'PERMIT_SURRENDER_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_TRACK_PAYMENT'
      | 'PERMIT_SURRENDER_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_SURRENDER_WAIT_FOR_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_VARIATION_APPLICATION_REVIEW'
      | 'PERMIT_VARIATION_OPERATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_REGULATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_VARIATION_WAIT_FOR_REVIEW'
      | 'PERMIT_VARIATION_WAIT_FOR_RFI_RESPONSE'
      | 'VERIFIER_NO_LONGER_AVAILABLE',
    observe: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<Array<AssigneeUserInfoDTO>>;
  public getCandidateAssigneesByTaskTypeUsingGET(
    taskId: number,
    taskType:
      | 'ACCOUNT_USERS_SETUP'
      | 'AER_APPLICATION_AMENDS_SUBMIT'
      | 'AER_APPLICATION_REVIEW'
      | 'AER_APPLICATION_SUBMIT'
      | 'AER_APPLICATION_VERIFICATION_SUBMIT'
      | 'AER_WAIT_FOR_AMENDS'
      | 'AER_WAIT_FOR_REVIEW'
      | 'AER_WAIT_FOR_VERIFICATION'
      | 'INSTALLATION_ACCOUNT_OPENING_APPLICATION_REVIEW'
      | 'INSTALLATION_ACCOUNT_OPENING_ARCHIVE'
      | 'NEW_VERIFICATION_BODY_INSTALLATION'
      | 'PERMIT_ISSUANCE_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_ISSUANCE_APPLICATION_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_REVIEW'
      | 'PERMIT_ISSUANCE_APPLICATION_SUBMIT'
      | 'PERMIT_ISSUANCE_CONFIRM_PAYMENT'
      | 'PERMIT_ISSUANCE_MAKE_PAYMENT'
      | 'PERMIT_ISSUANCE_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_ISSUANCE_TRACK_PAYMENT'
      | 'PERMIT_ISSUANCE_WAIT_FOR_AMENDS'
      | 'PERMIT_ISSUANCE_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_ISSUANCE_WAIT_FOR_REVIEW'
      | 'PERMIT_ISSUANCE_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_NOTIFICATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_APPLICATION_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_AMENDS_SUBMIT'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_APPLICATION_REVIEW'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_AMENDS'
      | 'PERMIT_NOTIFICATION_FOLLOW_UP_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_FOLLOW_UP'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_REVIEW'
      | 'PERMIT_NOTIFICATION_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_REVOCATION_APPLICATION_PEER_REVIEW'
      | 'PERMIT_REVOCATION_APPLICATION_SUBMIT'
      | 'PERMIT_REVOCATION_CESSATION_SUBMIT'
      | 'PERMIT_REVOCATION_CONFIRM_PAYMENT'
      | 'PERMIT_REVOCATION_MAKE_PAYMENT'
      | 'PERMIT_REVOCATION_TRACK_PAYMENT'
      | 'PERMIT_REVOCATION_WAIT_FOR_APPEAL'
      | 'PERMIT_REVOCATION_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_PEER_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_REVIEW'
      | 'PERMIT_SURRENDER_APPLICATION_SUBMIT'
      | 'PERMIT_SURRENDER_CESSATION_SUBMIT'
      | 'PERMIT_SURRENDER_CONFIRM_PAYMENT'
      | 'PERMIT_SURRENDER_MAKE_PAYMENT'
      | 'PERMIT_SURRENDER_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_SURRENDER_TRACK_PAYMENT'
      | 'PERMIT_SURRENDER_WAIT_FOR_PEER_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_SURRENDER_WAIT_FOR_REVIEW'
      | 'PERMIT_SURRENDER_WAIT_FOR_RFI_RESPONSE'
      | 'PERMIT_VARIATION_APPLICATION_REVIEW'
      | 'PERMIT_VARIATION_OPERATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RDE_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_REGULATOR_APPLICATION_SUBMIT'
      | 'PERMIT_VARIATION_RFI_RESPONSE_SUBMIT'
      | 'PERMIT_VARIATION_WAIT_FOR_RDE_RESPONSE'
      | 'PERMIT_VARIATION_WAIT_FOR_REVIEW'
      | 'PERMIT_VARIATION_WAIT_FOR_RFI_RESPONSE'
      | 'VERIFIER_NO_LONGER_AVAILABLE',
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: '*/*' },
  ): Observable<any> {
    if (taskId === null || taskId === undefined) {
      throw new Error(
        'Required parameter taskId was null or undefined when calling getCandidateAssigneesByTaskTypeUsingGET.',
      );
    }
    if (taskType === null || taskType === undefined) {
      throw new Error(
        'Required parameter taskType was null or undefined when calling getCandidateAssigneesByTaskTypeUsingGET.',
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['*/*'];
      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType_ = 'text';
    }

    return this.httpClient.get<Array<AssigneeUserInfoDTO>>(
      `${this.configuration.basePath}/api/v1.0/tasks-assignment/${encodeURIComponent(
        String(taskId),
      )}/candidate-assignees/${encodeURIComponent(String(taskType))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
